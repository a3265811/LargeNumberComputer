#include "InorderToPostorder.h"
#include "Computer.h"
#include <vector>
#define MAX(a,b) a>b?a:b

void Computer(string str)
{
	vector<string> stackNumber;	//一個stack用於存放運算元
	string temp = "";	//一個暫存空間
	string pre="";
	string post = "";
	string answer = "";
	int carry = 0;
	int ansSize = 0;
	bool findPre = false;
	//for (int i = 0; i < (int)str.length(); i++)
	//{
	//	//假如遇上分隔字元...
	//	if (str[i] == ' ')
	//	{
	//		//判斷其是否為運算子
	//		if ((int)temp.length() == 1 && (isOperator(temp[0]) || temp == "@"))
	//		{
	//			int size = stackNumber.size();
	//			string ans = "(";
	//			//從堆疊拿出兩個數做加法
	//			if (temp == "+")
	//			{
	//				ans += stackNumber[size - 2] + "+" + stackNumber[size - 1] + ")";
	//				cout << ans << endl;
	//				stackNumber.pop_back();
	//				stackNumber.pop_back();
	//				stackNumber.push_back(ans);
	//			}
	//			//從堆疊拿出兩個數做減法
	//			else if (temp == "-")
	//			{
	//				ans += stackNumber[size - 2] + "-" + stackNumber[size - 1] + ")";
	//				cout << ans << endl;
	//				stackNumber.pop_back();
	//				stackNumber.pop_back();
	//				stackNumber.push_back(ans);
	//			}
	//			//從堆疊拿出兩個數做乘法
	//			else if (temp == "*")
	//			{
	//				ans += stackNumber[size - 2] + "*" + stackNumber[size - 1] + ")";
	//				cout << ans << endl;
	//				stackNumber.pop_back();
	//				stackNumber.pop_back();
	//				stackNumber.push_back(ans);
	//			}
	//			//從堆疊拿出兩個數做除法
	//			else if (temp == "/")
	//			{
	//				ans += stackNumber[size - 2] + "/" + stackNumber[size - 1] + ")";
	//				cout << ans << endl;
	//				stackNumber.pop_back();
	//				stackNumber.pop_back();
	//				stackNumber.push_back(ans);
	//			}
	//			//從堆疊拿出一個數加負號
	//			else if (temp == "@")
	//			{
	//				ans += '-' + stackNumber[size - 1] + ")";
	//				cout << ans << endl;
	//				stackNumber.pop_back();
	//				stackNumber.push_back(ans);
	//			}
	//			//從堆疊拿出兩個數做次方
	//			else if (temp == "^")
	//			{
	//				ans += stackNumber[size - 2] + "^" + stackNumber[size - 1] + ")";
	//				cout << ans << endl;
	//				stackNumber.pop_back();
	//				stackNumber.pop_back();
	//				stackNumber.push_back(ans);
	//			}
	//			//從堆疊拿出一個數做階層
	//			else if (temp == "!")
	//			{
	//				ans += stackNumber[size - 1] + "!)";
	//				cout << ans << endl;
	//				stackNumber.pop_back();
	//				stackNumber.push_back(ans);
	//			}
	//		}
	//		else
	//		{
	//			//不是運算符號，代表其為運算元
	//			//將此數放入堆疊中
	//			stackNumber.push_back(temp);
	//		}
	//		temp = "";
	//	}
	//	else
	//	{
	//		//還沒遇到分隔符號，代表該字元與前面是一體的
	//		temp += str[i];
	//	}
	//}
	if (str[str.length() - 1] == ' ')str.erase(str.length() - 1, 1); //把str最後面的空白拿掉
	//概念:把answer assign給pre 最後只要一直往後找post做計算就好
	for (int i = 0; i < str.length(); i++)
	{
		if (str[i] == ' ')
		{
			if (!findPre)
			{
				findPre = true;
			}
			else if (answer != "" && post=="")
			{
				pre = answer;
				answer = "";
			}
		}
		else if(str[i]=='+')
		{
			ansSize = MAX(pre.length(), post.length()); //判斷誰比較長 用來比較誰需要補0
			//補0對齊兩個數字
			if (pre.length() < ansSize)
			{
				temp = pre;
				pre = "";
				while (ansSize - pre.length()-1)pre += '0';
				pre += temp;
			}
			else if (post.length() < ansSize)
			{
				temp = post;
				post = "";
				while (ansSize - post.length()-1)post += '0';
				post += temp;
			}
			//加法 temp把複製answer answer算完再把temp加回去 維持正序輸出
			for (int i = ansSize-1; i >=0; i--)
			{
				temp = answer;
				answer = (char)((int)((pre[i] - '0' + post[i] - '0') + carry) % 10 + '0');
				answer += temp;
				carry = ((int)(pre[i] + post[i] - '0' + carry) - '0') / 10;
				
			}
			//判斷是否有最後進位
			if (carry)
			{
				temp = answer;
				answer = answer + (char)(carry % 10 + '0');
				answer += temp;
			}
			post = "";
			temp = "";
		}
		else if (str[i] == '-')
		{

		}
		else if (str[i] == '*')
		{

		}
		else if (str[i] == '/')
		{

		}
		else if (str[i] == '@')
		{

		}
		else if (str[i] == '^')
		{

		}
		else if (str[i] == '!')
		{

		}
		else if(str[i]=='(')
		{

		}
		else if (str[i] == ')')
		{

		}
		else
		{
			//找運算元
			if (!findPre)
			{
				pre += str[i];
			}
			else
			{
				post += str[i];
			}
		}
	}
	cout << answer << endl;
}
